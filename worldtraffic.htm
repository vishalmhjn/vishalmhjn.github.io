<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />
<title>Live World Traffic</title>
<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.5.0/mapbox-gl.css' rel='stylesheet' />
<style>
body { margin:0; padding:0; }
#map { position:absolute; top:0; bottom:0; width:100%; }
</style>
</head>
<body>
 
<div id='map'></div>
<script>
mapboxgl.accessToken = 'pk.eyJ1IjoidmlzaG1hcCIsImEiOiJjazA5eXZsbTIwY3h3M21wZWkyMmNsbGd0In0.z6IHNpog1MVy-MBl_NZOWw';
var map = new mapboxgl.Map({
container: 'map',
style: 'mapbox://styles/vishmap/ck09z3aca1z8u1dmv3hadxb18',
center: [11.5820, 48.1351],
zoom: 10
});
 
map.on('load', function () {

  // var url_paris = 'http://0.0.0.0:8001/mapbox/geodata/paris_iris.json';
  // var url_mumbai = 'http://0.0.0.0:8001/mapbox/geodata/mumbai_hexclusters.json';
  // var url_delhi = 'http://0.0.0.0:8001/mapbox/geodata/new_delhi_wards.json';
  // var url_amsterdam = 'http://0.0.0.0:8001/mapbox/geodata/amsterdam_wijk.json';
  // var url_london = 'http://0.0.0.0:8001/mapbox/geodata/18_lsoa.json';
  // var url_paris_sensors = 'http://0.0.0.0:8001/mapbox/geodata/referentiel-comptages-routiers.geojson';


  // map.addSource('paris', { type: 'geojson', data: url_paris});
  // map.addSource('mumbai', { type: 'geojson', data: url_mumbai});
  // map.addSource('amsterdam', { type: 'geojson', data: url_amsterdam});
  // map.addSource('delhi', { type: 'geojson', data: url_delhi});
  // map.addSource('london', { type: 'geojson', data: url_london});
  // map.addSource('paris_sensors', { type: 'geojson', data: url_paris_sensors});

	// map.addLayer({
	// "id": "paris-boundary",
	// "type": "fill",
	// "source": "paris",
	// "paint": {
	// //"fill-color": "#888888",
	// "fill-opacity": 0.4
	// },
	// "filter": ["==", "$type", "Polygon"]
	// });

	// map.addLayer({
	// "id": "mumbai-boundary",
	// "type": "fill",
	// "source": "mumbai",
	// "paint": {
	// //"fill-color": "#888888",
	// "fill-opacity": 0.4
	// },
	// "filter": ["==", "$type", "Polygon"]
	// });

	// 	map.addLayer({
	// "id": "amsterdam-boundary",
	// "type": "fill",
	// "source": "amsterdam",
	// "paint": {
	// //"fill-color": "#888888",
	// "fill-opacity": 0.4
	// },
	// "filter": ["==", "$type", "Polygon"]
	// });

	// 	map.addLayer({
	// "id": "delhi-boundary",
	// "type": "fill",
	// "source": "delhi",
	// "paint": {
	// //"fill-color": "#888888",
	// "fill-opacity": 0.4
	// },
	// "filter": ["==", "$type", "Polygon"]
	// });

	// 	map.addLayer({
	// "id": "london-boundary",
	// "type": "fill",
	// "source": "london",
	// "paint": {
	// //"fill-color": "#888888",
	// "fill-opacity": 0.4
	// },
	// "filter": ["==", "$type", "Polygon"]
	// });

	// Insert the layer beneath any symbol layer.
	//Uncomment below to enable 3D buildings
	// var layers = map.getStyle().layers;
	 
	// var labelLayerId;
	// for (var i = 0; i < layers.length; i++) {
	// if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
	// labelLayerId = layers[i].id;
	// break;
	// }
	// }
	 
	// map.addLayer({
	// 'id': '3d-buildings',
	// 'source': 'composite',
	// 'source-layer': 'building',
	// 'filter': ['==', 'extrude', 'true'],
	// 'type': 'fill-extrusion',
	// 'minzoom': 15,
	// 'paint': {
	// 'fill-extrusion-color': '#aaa',
	 
	// // use an 'interpolate' expression to add a smooth transition effect to the
	// // buildings as the user zooms in
	// 'fill-extrusion-height': [
	// "interpolate", ["linear"], ["zoom"],
	// 15, 0,
	// 15.05, ["get", "height"]
	// ],
	// 'fill-extrusion-base': [
	// "interpolate", ["linear"], ["zoom"],
	// 15, 0,
	// 15.05, ["get", "min_height"]
	// ],
	// 'fill-extrusion-opacity': .6
	// }
	// }, labelLayerId);



	// Add sensor colors
	
	// map.addSource("sensor_traffic", {
	// url: 'http://0.0.0.0:8001/mapbox/sensordata/july_paris.json'
	// });
	 
	// var maxValue = 3000;

	// var expression = ["match", ["get", "iu_ac"]];
	// var flow = ["match", ["get", "iu_ac"]];
	// // Calculate color for each state based on the unemployment rate
	// data.forEach(function(row) {
	// var red = (row["2019-07-01T18:00:00_q"] / maxValue) * 255;
	// var green = 255 - red;
	// var color = "rgba(" + red + ", " + green + ", " + 0 + ", 0.8)";
	// var width = (row["2019-07-01T18:00:00_q"] / maxValue);
	// expression.push(row["iu_ac"], color);
	// flow.push(row["iu_ac"], width);
	// });
	 
	// // Last value is the default, used where there is no data
	// expression.push("rgba(0,255,0,0.5)");

	// map.addLayer({
	// "id": "paris_sensors",
	// "type": "line",
	// "source": "paris_sensors",
	// "paint": {
	// 	"line-color": expression,
	// 	"line-width": 6
	// //"fill-color": expression,
	// //"fill-opacity": 1
	// //"line-width":10

	// },
	// "filter": ["==", "$type", "LineString"]
	// });

	// Add layer from the vector tile source with data-driven style
	// map.addLayer({
	// "id": "states-join",
	// "type": "fill",
	// "source": "states",
	// "source-layer": "states",
	// "paint": {
	// "fill-color": expression
	// }
	// }, 'waterway-label');


});

</script>
 
</body>
</html>